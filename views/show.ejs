<!DOCTYPE html>
<html>
  <head>
    <title>PSPDFKit Web Example</title>
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />
    <link rel="stylesheet" href="/stylesheets/app.css" />
    <script src="<%= pspdfkitExternalUrl %>/pspdfkit.js"></script>
  </head>
  <body>
    <header class="navbar">
      <div class="navbar-left">
        <a href="/" class="navbar-icon">&lt;</a>
      </div>
      <div class="navbar-center">
        <h1><%= doc.title %></h1>
      </div>
      <div class="navbar-right">
        <% if (instant) { %>
        <a href="?instant=false" class="btn btn-success navbar-btn"
          >Instant: ON</a
        >
        <% } else { %>
        <a href="?instant=true" class="btn btn-default navbar-btn"
          >Instant: OFF</a
        >
        <% } %> <% if(user == doc.owner) { %>
        <a
          href="/delete/<%= doc.id %>"
          onclick="return confirm('Are you sure?')"
          class="btn btn-danger navbar-btn"
          >Delete document</a
        >
        <% } %>
      </div>
    </header>
    <main class="document">
      <div id="doc-viewer" class="viewer"></div>
      <script>
                let instance;

                const ocrItem = {
                    type: "custom",
                    title: "OCR",
                    async onPress() {
                      //Converting the total page count to an array that I'll later use to split the file in half
                      const pageIndexes = Array.from(
                        { length: instance.totalPageCount },
                        (_, i) => i
                      );
                      const firstHalf = pageIndexes.slice(0, Math.ceil(pageIndexes.length / 2));
                      const secondHalf = pageIndexes.slice(Math.ceil(pageIndexes.length / 2));

                      console.log({pageIndexes, firstHalf, secondHalf, count: instance.totalPageCount})

                      console.log("Buidling first half...")
                      //First file
                      const fileA = await instance
                        .exportPDFWithOperations([
                          {
                            type: "removePages",
                            pageIndexes: secondHalf,
                          },
                          {
                            type: "performOcr",
                            pageIndexes: firstHalf,
                            language: "english",
                          },

                          //Adding an Annotation to the first half to show that the processed file is the one being loaded
                          {
                            type: "applyInstantJson",
                            instantJson: {
                              annotations: [
                                {
                                  bbox: [100, 150, 200, 75],
                                  blendMode: "normal",
                                  createdAt: "1970-01-01T00:00:00Z",
                                  id: "01F73GJ4RPENTCMFSCJ5CSFT5G",
                                  name: "01F73GJ4RPENTCMFSCJ5CSFT5G",
                                  opacity: 1,
                                  pageIndex: 0,
                                  strokeColor: "#2293FB",
                                  strokeWidth: 5,
                                  type: "pspdfkit/shape/rectangle",
                                  updatedAt: "1970-01-01T00:00:00Z",
                                  v: 1,
                                },
                              ],
                              format: "https://pspdfkit.com/instant-json/v1",
                            },
                          },
                        ]) //Returning a blob so I can use it when I import them later
                        .then((file) => new Blob([file], { type: "application/pdf" }));

                      console.log("Buidling second half...")
                      //Second file
                      const fileB = await instance
                        .exportPDFWithOperations([
                          {
                             type: "performOcr",
                             pageIndexes: secondHalf,
                             language: "english",
                          },
                          {
                            type: "removePages",
                            pageIndexes: firstHalf,
                          }
                        ])
                        .then((file) => new Blob([file], { type: "application/pdf" }));

                      console.log("Buidling final doc...")
                      const finalDoc = await instance
                        .exportPDFWithOperations([
                          //The order of the operations matters
                          {
                            type: "importDocument",
                            beforePageIndex: instance.totalPageCount,
                            treatImportedDocumentAsOnePage: false,
                            document: fileB,
                          },
                          {
                            type: "importDocument",
                            beforePageIndex: instance.totalPageCount,
                            treatImportedDocumentAsOnePage: false,
                            document: fileA,
                          },
                          {
                            type: "removePages",
                            pageIndexes,
                          },
                        ])

                      console.log("Triggering download of final doc: ", finalDoc);
                      triggerDownload(finalDoc);
                    }
                  }

                var configuration = {
                  authPayload: { jwt: "<%= jwt %>" },
                  container: "#doc-viewer",
                  documentId: "<%= doc.id %>",
                  instant: <%= instant %>,
                  toolbarItems: [...PSPDFKit.defaultToolbarItems, ocrItem],
                };

                PSPDFKit.load(configuration).then(_instance => {
                  instance = _instance;
                }).catch(function(error) {
                  console.log(error);
                });

        function triggerDownload(doc) {
          const supportsDownloadAttribute = HTMLAnchorElement.prototype.hasOwnProperty(
            "download"
          );
          const blob = new Blob([doc], { type: "application/pdf" });
          if (navigator.msSaveOrOpenBlob) {
            navigator.msSaveOrOpenBlob(blob, "download.pdf");
          } else if (!supportsDownloadAttribute) {
            const reader = new FileReader();
            reader.onloadend = function() {
              const dataUrl = reader.result;
              downloadPdf(dataUrl);
            };
            reader.readAsDataURL(blob);
          } else {
            const objectUrl = window.URL.createObjectURL(blob);
            downloadPdf(objectUrl);
            window.URL.revokeObjectURL(objectUrl);
          }
        };

        function downloadPdf(blob) {
          const a = document.createElement("a");
          a.href = blob;
          a.style.display = "none";
          a.download = "download.pdf";
          a.setAttribute("download", "download.pdf");
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
        }
      </script>
      <div class="sidebar">
        <h3 class="sidebar-title">Who can see this document?</h3>
        <form action="/d/<%= doc.id %>/users" method="post">
          <ul class="list-group">
            <% allUsers.forEach(function(u) { %>
            <li class="list-group-item">
              <label>
                <% if(u == doc.owner) { %>
                <span class="owner"> <%= u %> (Owner) </span>
                <input type="checkbox" disabled checked />
                <% } else { %> <input type="checkbox" name="users[]" value="<%=
                u %>" <%= (u == doc.owner) ? 'disabled' : '' %> <%= hasAccess(u,
                doc) ? 'checked' : '' %>/> <%= u %> <% } %>
              </label>
            </li>
            <% }) %>
          </ul>
          <button type="submit" class="btn list-group-btn">
            Update share settings
          </button>
        </form>
        <h3 class="sidebar-title">Available Layers</h3>
        <ul class="list-group">
          <% layers.forEach(function(l) { %>
          <li class="list-group-item<%= l === layer ? ' current' : '' %>">
            <a href="/d/<%= doc.id %>/<%= l %>">
              <% if(l === ''){ %> Default Layer <% } else { %> <%= l %> <% } %>
            </a>
          </li>
          <% }) %> <% if(!layers.includes(layer)){ %>
          <li class="list-group-item current">
            <a href="/d/<%= doc.id %>/<%= layer %>"> <%= layer %> </a>
          </li>
          <% } %>
        </ul>
        <div class="create-layer-form">
          <h3 class="sidebar-title">Create New Layer</h3>
          <form action="/d/change_layer" method="post">
            <input type="text" name="layer" />
            <input type="hidden" name="document_id" value="<%= doc.id%>" />
            <button type="submit" class="btn list-group-btn">
              Create Layer
            </button>
          </form>
        </div>
      </div>
    </main>
  </body>
</html>
